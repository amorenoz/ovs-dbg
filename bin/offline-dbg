#!/bin/bash

set -eu

SCRIPT=`realpath -s $0`
SCRIPT_PATH=`dirname $SCRIPT`
CONTAINER_PATH=${SCRIPT_PATH}/../containers/ovs-dbg

OVN_NAMESPACE=ovn-kubernetes
WORKDIR=${OVS_DBG_WORKDIR:-/tmp/ovs-offline-dbg}
VAR_RUN=${WORKDIR}/var-run


usage() {
    echo "$0 [OPTIONS] COMMAND [COMMAND_OPTIONS]"
    echo ""
    echo "Debug OVS by recreating an environment offline"
    echo ""
    echo "Available commands:"
    echo "  build                Builds the needed container images"
    echo "  collect-k8s NODE     Collects information from a running k8s node and saves it in the working directory"
    echo "    Options":
    echo "       -o:    Openshift environment"
    echo ""
    echo "  start                Starts an offline debugging session. Data must have been previously collected in the working directory"
    echo "  print                Prints the available information found in the working directory"
    echo "  stop                 Stops the offline debugging environment"
    echo ""
    echo "Generic options"
    echo "  -h:     Print help"
    echo "  -w:     Set working directory. Also configurable via OVS_DBG_WORKDIR env var. Default: /tmp/ovs-offline-dbg"
    echo "  -d:     Set debug mode"
}

error() {
    echo "Error: $@"
    exit 1
}

do_build() {
    echo "Offline OVS Debugging: building images"
    echo "***************************************"

    docker build -t ovs-dbg -f ${CONTAINER_PATH}/Dockerfile ${CONTAINER_PATH}
}

do_stop() {
    docker kill ovsdb-server &>/dev/null || true
    docker kill ovs-vswitchd &>/dev/null || true
    docker rm ovsdb-server &>/dev/null || true
    docker rm ovs-vswitchd &>/dev/null || true
    rm -rf ${WORKDIR}
    echo "Offline OVS Debugging stopped"
    echo "*****************************"
}

do_collect-k8s() {
    OPTIND=1
    while getopts "oh" opt; do
        case ${opt} in
            h)
                usage
                exit 0
                ;;
            o)
                OVN_NAMESPACE=openshift-ovn-kubernetes
                ;;
        esac
    done
    shift $(((OPTIND -1)))

    if [ $# -lt 1 ]; then  
        usage
        exit 1
    fi
    NODE=$1
    kubectl get node $NODE || error "Node not found"

    ovnkube_node=$(kubectl get pods -n $OVN_NAMESPACE --field-selector spec.nodeName=$NODE -o name | head -1 | sed "s/^.\{4\}//")


    # Collect the flows and groups for future restoration
    bridges=$(kubectl exec -n $OVN_NAMESPACE $ovnkube_node -- ovs-vsctl -- --real list-br)
    kubectl exec -it -n $OVN_NAMESPACE $ovnkube_node -- sh -c "/usr/share/openvswitch/scripts/ovs-save save-flows $(echo $bridges | xargs) > /tmp/restore.sh"
    kubectl cp -n $OVN_NAMESPACE $ovnkube_node:/tmp/restore.sh ${WORKDIR}/restore_flows/do_restore.sh
    
    save_dir=$(cat ${WORKDIR}/restore_flows/do_restore.sh | awk '/replace/{print $6; exit}' | xargs dirname)
    kubectl cp -n $OVN_NAMESPACE $ovnkube_node:$save_dir ${WORKDIR}/restore_flows
    cat <<EOF > ${WORKDIR}/restore_flows/restore.sh
CURR_DIR=\$(dirname \$(realpath \$0))
ln -s \$CURR_DIR $save_dir
sh \$CURR_DIR/do_restore.sh
EOF
    
    # Collect the DB backup
    mkdir -p $VAR_RUN
    kubectl exec -i -n $OVN_NAMESPACE $ovnkube_node ovsdb-client backup > ${WORKDIR}/db.conf

    echo ""
    echo ""
    echo "Offline OVS Debugging: data collected and stored in ${WORKDIR}"
    echo "**************************************************************"
}

do_start() {
    # Ensure ovs-dbg image is present
    docker inspect ovs-dbg 2>&1 >/dev/null || (
        echo "Failed to find a local container named ovs-dbg. Pulling from quay.io/amorenoz/ovs-dbg"
        docker pull quay.io/amorenoz/ovs-dbg && docker tag quay.io/amorenoz/ovs-dbg ovs-dbg
    )
    
    # run ovsdb-server
    docker kill ovsdb-server || true
    docker run -d -p 127.0.0.1:6640:6640/tcp -v ${WORKDIR}/db.conf:/usr/local/var/run/openvswitch/db.backup -v ${VAR_RUN}:/usr/local/var/run/openvswitch/  --name ovsdb-server --rm ovs-dbg ovsdb 
    
    # run ovs-vswitchd
    docker kill ovs-vswitchd || true
    docker run -d -p 127.0.0.1:16640:6640/tcp -e RESTORE_DIR="/root/restore_flows" -v ${WORKDIR}/restore_flows:"/root/restore_flows" -v ${VAR_RUN}:/usr/local/var/run/openvswitch/ --name ovs-vswitchd --rm ovs-dbg vswitchd-dummy

    sleep 3

    echo ""
    echo "Offline OVS Debugging started"
    echo "******************************"
    echo ""
    print_tools

}

print_tools() {
    echo "Working directory: $WORKDIR:"
    vswitchd_ctl=$(ls -x $VAR_RUN/ovs-vswitchd.*.ctl)
    ovsdb_sock=$(ls -x $VAR_RUN/db.sock)
    
    echo ""
    echo "You can now execute the follwing ovs tools:"
    echo "   ovs-appctl --target=${vswitchd_ctl}"
    echo "   ovs-vsctl --db unix:${ovsdb_sock}"
    for mgt in $(ls -x $VAR_RUN/*.mgmt); do
        echo "   ovs-ofctl COMMAND ${mgt}"
    done
}

while getopts ":hdw:" opt; do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        w)
            WORKDIR=$(realpath $OPTARG)
            VAR_RUN=${WORKDIR}/var-run
            ;;
        d)
            set -x
            ;;
    esac
done

shift $(((OPTIND -1)))
if [ $# -lt 1 ]; then  
    usage
    exit 1
fi
CMD=$1
shift

case $CMD in
    collect-k8s)
        do_collect-k8s $@
        ;;
    build)
        do_build $@
        ;;
    start)
        do_start $@
        ;;
    print)
        print_tools
        ;;
    stop)
        do_stop $@
        ;;
    *)
        echo "Invalid command $CMD" 1>&2
        exit 1
        ;;
esac
